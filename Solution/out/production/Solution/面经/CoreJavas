Exception Hierarchy
Throwable-》error（unchecked，and not expect to recover from）& exception
exception-》runtime exception（unchecked） & Other exceptions（expect to encouter in course of duty and recover）
runtime exception is not expected to occur but still possible recover from，e.g. NPE，Outofbound
https://www.javamex.com/tutorials/exceptions/exceptions_hierarchy.shtml

why you need to override hashcode and equals
Hashing retrieval is a two-step process.
Find the right bucket (using hashCode())
Search the bucket for the right element (using equals() )


How do you debug a particular type of exceptions in code

How do you debug a production issue
https://zeroturnaround.com/rebellabs/how-to-turn-the-light-on-in-your-production-environment-and-scare-the-bugs-out/
logged errors and caught exceptions,
Solution: Generate a UUID at every thread’s entry point to your application and append it to every log entry – Keep it consistent over machines to save its original context. Also, consider using some of the log management tools if you want a way out of the console.
The key is to draw as much context as you can, the thread you’re in, the class, and maybe even the specific method if you’re on a critical path.

Problem #2: Uncaught Exceptions Don’t Have Information About the Error
 The Default Uncaught Exception Handler. Once we have an Uncaught Exception Handler in place, we can actually do something about them and draw out some valuable data. The problem is that by the time they reach the Uncaught Exception Handler up the call stack, most of the context we can draw about the error is lost. Once again, we have another small window of opportunity here and not all is lost: Thread Local Storage (TLS) and thread names.
Thread Local Storage lets us store variables on the thread itself, not bounded to any stack frame.
So with TLS we can store more data about the state we were in before the exception was thrown. Another cool trick here is using meaningful thread names, so instead of a name like:

pool-1-thread-1
We can do:
Thread.currentThread().setName(Context + TID + Params + current Time, ...);

And then get:

Queue Processing Thread, MessageID: AB5CAD, type: AnalyzeGraph, queue: ACTIVE_PROD
Solution: Set an uncaught exception handler, keep thread names in mind and put your Thread Local Storage to work.

Problem #3: Your Process is Hanging and You Don’t Know Why
It’s probably a mission for good ol’ jstack from the tools you have built in your JDK. It can hook up into any Java process, just point it to a PID, and get sorted with output including all the threads that are currently running in it with their stack trace, frames, locks they’re holding and all sorts of other meta data. With jstack you can also analyze heap dumps or core dumps of processes that already don’t exist.
Solution: Know your way around jstack and use it to untie hairy situations.

Problem #4: All These Solutions Require Code Changes


Collections vs Collection in Java
Collection : The root interface！ of Java Collections Framework. Set, List, Map
Collections : A utility class that is a member of the Java Collections Framework.
1) Collections.max()
2) Collections.min()
3) Collections.sort()
4) Collections.synchronizedCollection()

Explain HTTP methods and their differences

Overview of (some) HTTP methods
HTTP Method	Idempotent	Safe
OPTIONS	yes	yes
GET	yes	yes
HEAD	yes	yes
PUT	yes	no
POST	no	no
DELETE	yes	no
PATCH	no	no
Idempotency is important in building a fault-tolerant API. Suppose a client wants to update a resource through POST. Since POST is not a idempotent method, calling it multiple times can result in wrong updates.
Overall:

Both PUT and POST can be used for creating.

You have to ask "what are you performing the action to?" to distinguish what you should be using. Let's assume you're designing an API for asking questions. If you want to use POST then you would do that to a list of questions. If you want to use PUT then you would do that to a particular question.

Great both can be used, so which one should I use in my RESTful design:

You do not need to support both PUT and POST.

Which is used is left up to you. But just remember to use the right one depending on what object you are referencing in the request.

Some considerations:

Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.
PUT is idempotent, so if you PUT an object twice, it has no effect. This is a nice property, so I would use PUT when possible.
You can update or create a resource with PUT with the same object URL
With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.
An example:

I wrote the following as part of another answer on SO regarding this:

POST:

Used to modify and update a resource

POST /questions/<existing_question> HTTP/1.1
Host: www.example.com/
Note that the following is an error:

POST /questions/<new_question> HTTP/1.1
Host: www.example.com/
If the URL is not yet created, you should not be using POST to create it while specifying the name. This should result in a 'resource not found' error because <new_question> does not exist yet. You should PUT the <new_question> resource on the server first.

You could though do something like this to create a resources using POST:

POST /questions HTTP/1.1
Host: www.example.com/
Note that in this case the resource name is not specified, the new objects URL path would be returned to you.

PUT:

Used to create a resource, or overwrite it. While you specify the resources new URL.

For a new resource:

PUT /questions/<new_question> HTTP/1.1
Host: www.example.com/
To overwrite an existing resource:

PUT /questions/<existing_question> HTTP/1.1
Host: www.example.com/


REST/SOAP
https://stackoverflow.com/questions/19884295/soap-vs-rest-differences
REST vs SOAP is not the right question to ask.

REST, unlike SOAP is not a protocol.

REST is an architectural style and a design for network-based software architectures.

REST concepts are referred to as resources. A representation of a resource must be stateless. It is represented via some media type. Some examples of media types include XML, JSON, and RDF. Resources are manipulated by components. Components request and manipulate resources via a standard uniform interface. In the case of HTTP, this interface consists of standard HTTP ops e.g. GET, PUT, POST, DELETE.

What design patterns you used and explain the usage
Design related question, design classes for Walmart store and discounts for a specific item in a cascading manner. What design patterns will you use etc.
2. Can you name few design patterns used in standard JDK library?
Decorator design pattern which is used in various Java IO classes, Singleton pattern which is used in Runtime , Calendar and various other classes, Factory pattern which is used along with various Immutable classes likes Boolean e.g. Boolean.valueOf and Observer pattern which is used in Swing and many event listener frameworks.

3. What is Singleton design pattern in Java ? write code for thread-safe singleton in Java
Singleton pattern focus on sharing of expensive object in whole system. Only one instance of a particular class is maintained in whole application which is shared by all modules. Java.lang.Runtime is a classical example of Singleton design pattern. You can also see my post 10 questions on Singleton pattern in Java for more questions and discussion. From Java 5 onwards you can use enum to thread-safe singleton.

4. What is main benefit of using factory pattern ? Where do you use it?
Factory pattern’s main benefit is increased level of encapsulation while creating objects. If you use Factory to create object you can later replace original implementation of Products or classes with more advanced and high performance implementation without any change on client layer. See my post on Factory pattern for more detailed explanation and benefits.

5. What is observer design pattern in Java
Observer design pattern is based on communicating changes in state of object to observers so that they can take there action. Simple example is a weather system where change in weather must be reflected in Views to show to public. Here weather object is Subject while different views are Observers. Look on this article for complete example of Observer pattern in Java.

6. Give example of decorator design pattern in Java ? Does it operate on object level or class level ?
Decorator pattern enhances capability of individual object. Java IO uses decorator pattern extensively and classical example is Buffered classes like BufferedReader and BufferedWriter which enhances Reader and Writer objects to perform Buffer level reading and writing for improved performance. Read more on Decorator design pattern and Java

builder
Builder pattern builds a complex object using simple objects and using a step by step approach. It separates the construction of a complex object from its representation so that the same construction process can create different representations. We can also make the object to build immutable.

Difference between factory and abstract factory？
 An abstract factory is simply a factory interface. With it, you can switch your factories at runtime, to allow different factories in different contexts. Examples could be different factories for different OS'es, SQL providers, middleware-drivers etc..
 The Factory Method creates objects through inheritance where the Abstract Factory creates objects through composition.